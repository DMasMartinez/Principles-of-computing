"""
Monte Carlo Tic-Tac-Toe Player
"""

import random
import poc_ttt_gui
import poc_ttt_provided as provided

# Constants for Monte Carlo simulator
# You may change the values of these constants as desired, but
#  do not change their names.
NTRIALS = 1000         # Number of trials to run
SCORE_CURRENT = 1.0 # Score for squares played by the current player
SCORE_OTHER = 1.0   # Score for squares played by the other player
    
# Add your functions here.

def mc_trial(board,player):
    while board.check_win()==None:
        i=random.randrange(0,board.get_dim())
        j=random.randrange(0,board.get_dim())
        board.move(i,j,player)
        provided.switch_player(player)
        board.check_win()

def mc_update_scores(scores,board,player):
    clone_board=board.clone()
    other_player=provided.switch_player(player)
    if clone_board.check_win()==player:
        for row in range(clone_board.get_dim()):
            for col in range(clone_board.get_dim()):
                if clone_board.square(row,col)==player:
                    scores[row][col]+=2
            
                if clone_board.square(row,col)==other_player:
                    scores[row][col]-=1
    elif clone_board.check_win()==provided.DRAW:
        for row in range(clone_board.get_dim()):
            for col in range(clone_board.get_dim()):
                if clone_board.square(row,col)==player:
                    scores[row][col]+=1
            
                if clone_board.square(row,col)==other_player:
                    scores[row][col]+=1
def get_best_move(board,scores):
    empty_cells=board.get_empty_squares()
    if len(empty_cells)!=0:
        scores_empty_cells=[scores[indice[0]][indice[1]] for indice in empty_cells]
        max_score=max(scores_empty_cells)
#        indices_max=[if scores[indice[0]][indice[1]]==max_score for indice in empty_cells return indice]
        indices_max=[]
        for indice in empty_cells:
            if scores[indice[0]][indice[1]]==max_score:
                indices_max.append(indice)
    return random.choice(indices_max)                                                                                                                                                                                                                                                                                                                                                                                                                                                                
def mc_move(board,player,trials):
    scores=[[0 for row in range(board.get_dim())]
                for col in range(board.get_dim())]
    best_moves=[]
    current_board=board.clone()
    empty_cells=current_board.get_empty_squares()
    for cell in empty_cells:
        other_player=provided.switch_player(player)
        current_board.move(cell[0],cell[1],other_player)
        wins=0
        best_percentage={}
        for trial in range(NTRIALS):
            mc_trial(current_board,player)
            mc_update_scores(scores,current_board,player)
            if current_board.check_win()==player:
                wins+=1
        best_percentage[cell]=(wins//NTRIALS)
    percentages=[val for val in best_percentage.values()]
    best_choice=max(percentages)
    for key,value in best_percentage.items():
        if best_percentage[key]==best_choice:
            return key
# Test game with the console or the GUI.  Uncomment whichever 
# you prefer.  Both should be commented out when you submit 
# for testing to save time.

provided.play_game(mc_move, NTRIALS, False)        
poc_ttt_gui.run_gui(3, provided.PLAYERX, mc_move, NTRIALS, False)
#new_scores=[[0 for i in range(3)]
#                for j in range(3)]
##new_board=[["X","X","X"],["O","O","X"],["X","O","O"]]
#other_board=provided.TTTBoard(3)
#new_board=provided.TTTBoard(3)
#new_board.move(0,0,provided.PLAYERX)
#new_board.move(0,1,provided.PLAYERX)
#new_board.move(0,2,provided.PLAYERX)
#new_board.move(1,0,provided.PLAYERO)
#new_board.move(1,1,provided.PLAYERO)
#new_board.move(1,2,provided.PLAYERX)
#new_board.move(2,0,provided.PLAYERX)
#new_board.move(2,1,provided.PLAYERX)
#new_board.move(2,2,provided.PLAYERO)
#print str(new_board)
#print new_board.check_win()
#print new_board.square(0,0)
#print mc_update_scores(new_scores,new_board,provided.PLAYERX)
##print mc_trial(other_board,provided.PLAYERX)
#print mc_move(other_board,provided.PLAYERX,1000)
